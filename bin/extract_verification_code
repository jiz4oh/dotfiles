#!/usr/bin/env ruby

require "net/http"
require "uri"
require "json"

# 替换为你的 AI API 密钥
API_KEY = ENV["OPENROUTER_API_KEY"] || `cat ~/.openrouter_token`.strip
API_URL = "https://openrouter.ai/api/v1/chat/completions"

def ask_ai_for_verification_code(content)
  # 强制将邮件内容编码为 UTF-8，并处理无效字符
  content = content.encode("UTF-8", invalid: :replace, undef: :replace, replace: "?")

  # 构建请求数据
  uri = URI.parse(API_URL)
  headers = {
    "Authorization" => "Bearer #{API_KEY}",
    "Content-Type" => "application/json"
  }
  data = {
    model: "google/gemini-2.0-flash-lite-preview-02-05:free",
    messages: [
      {
        role: "system",
        content: "你是一个邮件助手，专门提取邮件中的验证码。并且只返回验证码，不包含验证码以外的任何内容，如果没有验证码请不要回复任何内容"
      },
      {role: "user", content: "请从以下邮件内容中提取验证码：\n\n#{content}"}
    ],
    max_tokens: 50
  }

  res = nil
  retry_count = 0
  while retry_count < 3
    begin
      # 创建 HTTP 请求
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      http.open_timeout = 5
      http.read_timeout = 10

      request = Net::HTTP::Post.new(uri.path, headers)
      request.body = data.to_json

      # 发送请求
      response = http.request(request)

      response_body = response.body.force_encoding("UTF-8")
      # 解析响应
      if response.code == "200"
        result = JSON.parse(response_body)
        res = result.dig("choices", 0, "message", "content").strip
        break
      else
        res = "API 请求失败：#{response.code} - #{response_body}"
      end

    rescue
      retry_count += 1
      sleep(0.1 * 2 ** retry_count)
    end
  end

  return res
end

if __FILE__ == $0
  # 从命令行参数获取邮件内容
  email_content = ARGV[0]
  code = ask_ai_for_verification_code(email_content)
  if !code.nil?
    `~/bin/report_verification_code #{code} 2>/dev/null`
    puts(code)
  end
end
