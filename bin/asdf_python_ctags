#!/usr/bin/env bash
#
# Summary: Generate ctags for a given version's standard library
#
# Usage: asdf_python_ctags
#        asdf_python_ctags <version> [<version> ...]
#        asdf_python_ctags --all

shopt -s nullglob

# Provide rbenv completions
if [ "$1" = "--complete" ]; then
  exec asdf list python
fi

declare -a versions

for arg; do
  case $arg in
    --) ;;
    -a|--all)
      all=1
      ;;
    *)
      versions["${#versions[@]}"]="$arg"
      ;;
  esac
done

generate_ctags_in() {
  local tags_file_dir="$1"
  local languages="${2:-Python}"
  local source_code_dir="${3:-$tags_file_dir}"
  echo "Running ctags on $source_code_dir"
  (cd "$tags_file_dir"; ctags --languages="$languages" -R --tag-relative=yes "$source_code_dir")
}

generate_ctags_for() {
  local prefix=$(asdf where python "$version")
  [ -n "$prefix" ] || return 1
  if [ -d "$prefix/lib" ]; then
    for dir in \
      "$prefix"/lib/python[0-9]*
    do
      generate_ctags_in "$dir"
    done
    for dir in \
      "$prefix"/lib/python[0-9]*/site-packages
    do
      [ "$(find "$dir" -name '*.py'|wc -l)" = 0 ] || generate_ctags_in "$dir"
    done
  elif [ -w "$prefix/lib" ]; then
    generate_ctags_in "$prefix/lib"
  else
    echo "No directories for ctags found in $prefix" >&2
    return 1
  fi
}

if [ -n "$all" ]; then
  for version in $(asdf list python); do
    [ -L "$(asdf where python "$version")" ] || \
      generate_ctags_for "$version"
  done
elif [ ${#versions[@]} -eq 0 ]; then
  version=$(asdf exec python -c "import sys; print('.'.join(map(str, sys.version_info[:3])))")
  generate_ctags_for "$version"
else
  code=0
  for version in "${versions[@]}"; do
    generate_ctags_for "$version" || code=1
  done
  exit "$code"
fi
